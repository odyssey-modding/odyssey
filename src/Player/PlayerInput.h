#pragma once

#include <math/seadMatrix.h>
#include <math/seadVector.h>

namespace al {
class LiveActor;
}  // namespace al

class IUsePlayerCollision;
class IUseDimension;

class PlayerInput {
public:
    PlayerInput(const al::LiveActor*, const IUsePlayerCollision*, const IUseDimension*);
    ~PlayerInput() = default;
    void update();
    void updateWallAlong();
    void updateSnapMoveArea();
    void updateInput3D();
    sead::Vector2f& getMoveInputRaw(bool) const;
    void calcMoveInputImpl(sead::Vector3f*, const sead::Vector3f&, bool, bool, bool);
    void updateInput2D();
    void resetAlongWall();
    bool isNoInput();
    bool isNoInputSeparateCap();
    bool isHoldCapSeparateJump();
    bool isHoldCapSeparateHipDrop();
    s32 getSeparatePlay2P();
    bool isMove();
    bool isMoveDeepDown();
    sead::Vector2f& getStickMoveRaw() const;
    bool isMoveDeepDownNoSnap();
    bool isEnableCarry();
    bool isTriggerCarryStart();
    bool isTriggerCarryRelease();
    bool isTriggerSwingActionMario();
    bool isTriggerCarryReleaseBySwing();
    bool isTriggerAction();
    bool isTriggerJump();
    bool isTriggerHipDrop();
    bool isTriggerHeadSliding();
    bool isTriggerPaddle();
    bool isTriggerRolling(bool);
    bool isTriggerRollingRestartSwing();
    bool isTriggerRollingCancelHipDrop(bool);
    bool isTriggerHackAction();
    bool isTriggerHackJump();
    bool isTriggerHackSwing();
    bool isTriggerHackEnd();
    bool isTriggerHackSeparateJump();
    bool isTriggerSeparateCapJangoHelp();
    bool isHoldHackSeparateJump();
    bool isTriggerGetOff();
    bool isHoldAction();
    bool isHoldJump();
    bool isHoldHipDrop();
    bool isTriggerStartTalk();
    bool isTriggerStartWorldWarp();
    bool isTriggerCancelWorldWarp();
    bool isTriggerSpinCap();
    bool isTriggerToggleStayCap();
    bool isTriggerSpinAttackSeparate();
    s32 getSeparatePlay1P();
    bool isTriggerCapReturn();
    bool isTriggerCapAttackSeparate();
    bool isTriggerSwingActionCap();
    bool isTriggerCapSingleHandThrow();
    bool isTriggerCapDoubleHandThrow();
    bool isTriggerCapSeparateJump();
    bool isTriggerCapSeparateHipDrop();
    bool isTriggerSwingPoleClimbFast();
    bool isHoldPoleClimbDown();
    bool isTriggerAppendCapAttack(bool);
    bool isHoldSquat();
    void calcInputDirectionSnap2D(sead::Vector3f*);
    bool isHoldSpinCap();
    bool isHoldCapAction();
    bool isHoldPoleClimbFast();
    bool isHoldWallCatchMoveFast();
    bool isHoldHackAction();
    bool isHoldHackJump();
    bool isHoldEnterUpperDokan2D();
    bool isHoldEnterSideDokan2D(const sead::Vector3f&);
    void calcMoveDirection(sead::Vector3f*, const sead::Vector3f&);
    bool isTriggerChange2D();
    bool isTriggerChange3D();
    bool isReleaseJump();
    bool isReleaseHackAction();
    bool isReleaseHackJump();
    bool isEnableDashInput();
    bool isSpinInput();
    bool isSpinClockwise() const;
    bool isSpinCounterClockwise();
    void calcMoveInput(sead::Vector3f*, const sead::Vector3f&) const;
    void calc2DSnapJumpMoveInput(sead::Vector3f*, const sead::Vector3f&);
    bool isPoleMoveInputReverseX();
    sead::Matrix34f& getInputViewMtx() const;
    void calcPoleMoveInput(sead::Vector2f*);
    void calcCapThrowInput(sead::Vector3f*, const sead::Vector3f&);
    void calcCapSeparateMoveInput(sead::Vector3f*, const sead::Vector3f&);
    bool isSameStickMove(const sead::Vector2f&, f32);
    f32 getRadiconInputSteeringValue() const;
    sead::Vector2f& getStickCameraRaw() const;
    f32 getCameraInputRaw() const;
    sead::Vector2f& getStickCameraSubRaw() const;
    bool isTriggerCameraReset();
    bool isTriggerCameraSubjective();
    bool isHoldBalloonSet();
    bool isHoldCameraZoom();
    bool isHoldCameraSnapShotZoomIn();
    bool isHoldCameraSnapShotZoomOut();
    bool isHoldCameraSnapShotRollLeft();
    bool isHoldCameraSnapShotRollRight();
    bool isEnableShowTutorialInput();
    bool isEnableRecoveryLifeInput();
    sead::Vector2f& getCapThrowDir() const;
    sead::Vector2f& getSwingThrowDir() const;
    bool isSwingDirLeft();
    bool isSwingDirRight();
    bool isThrowTypeLeftRight(const sead::Vector2f&);
    bool isThrowTypeSpiral(const sead::Vector2f&);
    bool isThrowTypeRolling(const sead::Vector2f&);
    bool isEnableConsiderCapThrowDoubleSwing();
    f32 getPoseRotZDegreeLeft() const;
    f32 getPoseRotZDegreeRight() const;
    bool isTriggerSwingLeftHand();
    bool isTriggerSwingRightHand();
    bool isTriggerSwingDoubleHand();
    bool isTriggerSwingDoubleHandReverseDir();
    bool isTriggerSwingDoubleHandReverseInsideDir();
    bool isTriggerSwingDoubleHandReverseOutsideDir();
    sead::Vector2f& getSwingVelLeftHand() const;
    sead::Vector2f& getSwingVelRightHand() const;
    sead::Vector2f& getSwingLeftHandDir() const;
    sead::Vector2f& getSwingRightHandDir() const;
    void calcHoldMoveInput2D(sead::Vector3f*, const al::LiveActor*, const IUseDimension*, const sead::Vector2f&, const sead::Vector3f&,
                             const sead::Matrix34f*);
    void calcHoldMoveInput3D(sead::Vector3f*, const sead::Vector3f&, const sead::Matrix34f*);
    void snapWallAlongInput(sead::Vector3f*, const sead::Vector3f&);
    void snapAreaInput(sead::Vector3f*, const sead::Vector3f&);
    void resetHoldInfo3D();
    void resetHoldInfo2D();
};
